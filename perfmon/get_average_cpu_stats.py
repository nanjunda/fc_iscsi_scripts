#
# this script takes the *_CPU.csv file generated by automatically generated Medusa script 
# and generates a CSV file with all the parameters of Medusa such as q-depth, buffer size, read %, write %, etc.
# along with averate CPU stats used while medusa script runs for a given parameters mentioned above.
# here is the shell script used to drive this python script:
# start of shell script driver
# $ more process_perfmon_csv.sh
# PYSCRIPT="C:\Users\nsomayaj\Box_Sync\BroadcomTransition\SolutionIdeas\FC_iSCSI_Comparison\scripts\perfmon"
# 
# for i in 17*_CPU.csv
# do
#       f=`basename $i .csv`
#       out="${f}_Info.csv"
#       python ${PYSCRIPT}/calc_average_cpu_perf.py $i >$out
# done
# end of shell script driver
#

import csv
import sys

def convert_to_bytes(in_str):
    l = len(in_str)
    if "k" in in_str:
        return(int(in_str[0:l-1])*1024)
    if "b" in in_str:
        return(int(in_str[0:l-1]))
    if "m" in in_str:
        return(int(in_str[0:l-1])*1024*1024)



time_stamp = "Average"
av_cpu_idle_time = ""
av_cpu_intr_time = ""
av_cpu_priv_time = ""
av_cpu_proc_time = ""
av_cpu_user_time = ""

comma_separator = ", "
file_name = sys.argv[1]
words = file_name.split('_')
print("Time Stamp,I/F,Phase,xVal,fVal,Size,Q-Depth,Read,Write,tag,Time,CPU % Idle Time,CPU % Intr Time,CPU % Privileged Time,CPU % Proc Time,CPU % User Time")

h0=str(words[0])
h1=str(words[8])
h2=str(words[9])
h3=str(words[5])
h4=str(words[6])
h5=str(words[4])
h6=str(words[1])
h7=str(words[2])
h8=str(words[3])
h9=str(words[10])

h51 = str(convert_to_bytes(h5[1:]))
h=h0 + comma_separator + h1 + comma_separator + h2 + comma_separator + h3 + comma_separator + h4 + comma_separator + h51 + comma_separator + h6[1:] + comma_separator + h7[1:] + comma_separator + h8[1:] + comma_separator + h9

with open(file_name) as csvfile:
    readCSV = csv.reader(csvfile, delimiter=',')
    try:
        next(readCSV)
    except StopIteration:
        exit
    try:
        next(readCSV)
    except StopIteration:
        exit
    no_rows = 0
    for row in readCSV :
       time_stamp = str(row[0])
       no_rows += 1
       if time_stamp != "Average" :
       	continue
       av_cpu_idle_time  = str(row[1])
       av_cpu_intr_time  = str(row[2])
       av_cpu_priv_time  = str(row[3])
       av_cpu_proc_time  = str(row[4])
       av_cpu_user_time  = str(row[5])
    if (no_rows != 0):
        d = comma_separator + time_stamp + comma_separator + av_cpu_idle_time + comma_separator + av_cpu_intr_time + comma_separator + av_cpu_priv_time + comma_separator + av_cpu_proc_time + comma_separator + av_cpu_user_time
        print (h + d)
